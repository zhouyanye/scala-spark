继承和抽象类
匿名内部类
类型转换
动物类案例


继承
相似的内容提取出来单独的放到一个类中父类 然后让他多个子类和这个类(父类)产生一个关系
从而实行按子类可以访问父类的方法 这个关系就叫:继承

scala中使用extends关键字来实现继承
可以在子类中定义父类中没有的字段和方法 或者重写父类的方法
类和单例对象都可以有父类
class /object A类 extends B类  {
//子承父业
}
A类:子类 派生类
B类:父类 超类

已知学生类Student和老师类Teacher 他们都有姓名和年龄(属性 )都要吃饭(行为)
方法一 非继承类

object extends_lianxi {
//定义老师类 指定姓名 年龄 吃饭行为
class Teacher{
var name=""
var age=0
def eat()=println("老师吃牛肉面")
}
//定义学生类 指定姓名 年龄 吃饭行为
class Student{
var name=""
var age=0
def eat()=println("学生吃方便面")
}
//main 方法
  def main (args : Array[String]) : Unit = {
    //测试老师类
    var t=new Teacher
    t.name="刘老师"
    t.age=29
    println(t.name,t.age)
    t.eat()

    println("-"*10)

    //测试学生类
    val s=new Student()
    s.name="张三"
    s.age=19
    println(s.name,s.age)
    s.eat()
  }
}
方法二：继承 extends
object extends_lianxi {
  //定义Person类 作为父类
  class Person{
    //定义公共的内容 姓名 年龄 吃饭
    var name=""
    var age=0
    def eat()=println("人要吃饭")
  }

  //定义老师类 继承Person 人类
  class Teacher extends  Person {
  }
  //定义学生类  继承Person 人类
  class Student extends  Person {
  }
  //main 方法
  def main (args : Array[String]) : Unit = {
    //测试老师类
    val t=new Teacher
    t.name="刘老师"
    t.age=29
    println(t.name,t.age)
    t.eat()

    println("-"*10)

    //测试学生类
    val s=new Student
    s.name="张三"
    s.age=19
    println(s.name,s.age)
    s.eat()
  }
}
单例对象继承
定义Person类  成员变量 姓名  成员方法 sayHello() 定义单例对象Studnet继承自Person
object extends_lianxi1{
//定义Person类
class Person{
var  name=""
def sayHello()=Println("hello scala")
}
//定义单例对象Student 继承Person
object Student extends Person{}
//main方法
def main (args:Array[String]):Unit={
Student.name="张三"
println(Student.name)
Student.sayHello()
}
}
#方法重写
子类出现父类一样的方法时候 称为方法重写
scala中可以在子类override来重写父类成员 也可以使用super引用父类的成员

子类要重写父类的某一方法  该方法必须要用override关键字来修饰
可以使用override来重写val字段
父类用var修饰的变量 子类不可以重写
super关键字来访问父类的成员方法

定义Person类 属性 （姓名 年龄)有一个sayHello()方法
然后定义Student类继承Person类 重写Person类中的字段和方法
object override_lianxi {
    //定义Person类 属性(姓名 属性)
  class Person{
      val name="张三" //val  值不能修改
      var age=19//var 值可以修改
      //sayHello方法
      def sayHello():Unit=println("hi Person")
    }
    //定义Student类 继承Person
  class Student extends  Person{
      //重写父类成员变量
      override val name : String = "小明"

      //override var age=20  因为父类中用var修饰的变量 子类不能重写
      //重写父类的成员方法
      override def sayHello () : Unit = {
        //调用父类的成员方法
        super.sayHello ()
        println("Hey  Student")
      }
    }

  def main (args : Array[String]) : Unit = {
    val s=new Student
    println(s.name,s.age) //小明 19
    s.sayHello()  //先Person父类  再Student子类
  }
}


类型判断
isInstanceOf
getClass和classOf

isInstanceOf  判断对象是否为 指定类的对象
asInstanceOf 将对象抓换为指定的类型

val trueOrFalse:Boolean=对象.isInstanceOf[类型]
val 变量 =对象.asInstanceOf[类型]

val trueOrFalse=p.isInstanceOf[Student]
val s=p.asInstanceOf[Student]

定义 一个Person类
定义一个Student类继承Person类该有一个sayHello()方法
创建一个Student类对象 并指定它的类型为Person类型
object isInstanceOf_lianxi {
  //定义Person类
  class Person{
  }
  //定义Student 继承Person 该类有一个自己的成员方法sayHello()
    class Student extends Person{
    def sayHello()=println("hi Student")
  }
  //main
  def main (args : Array[String]) : Unit = {
    //通过多态形式 创建Student类型的对象
    /*
    多态： 同一个事物再不同时刻表现出来的不同形态 状态
    优点:灵活和扩展性 代码重用  统一接口
    弊端 父类引用不能直接使用子类的特有成员
     */
    val p : Person = new Student //多态   通过val p: Person = new Student这行代码，
    // 我们创建了一个类型为Person变量p，但实际上它指向的是一个Student类型的对象。因为这是Student的Person子类，
    // 所以我们可以把Student对象赋值给Person类型的变量。
    //尝试调用Student类中的sayHello()方法
    // p.sayHello()  父类引用不能直接使用子类的特有成员

    //判断对象p是否是Student类型的对象
    if (p.isInstanceOf [Student]) {
    //如果是 就将其转换成Student类型的对象 然后调用sayHello()方法
      val s=p.asInstanceOf[Student]
      //相当于  val s:Student =new Student
      s.sayHello()
  }
  }
}

getClass和classOf
isInstanceOf 只能判断对象是否为指定类以及其子类的对象，而不能精确的判断出:对象就是指定类的对象。如果要求精确地判断出对象的类型就是指定的数据类型，那么就只能使用 getClass 和classOf 来实现
用法
p.getClass可以精确获取对象的类型
classOf[类名]可以精确获取数据类型
使用==操作符可以直接比较类型


示例说明
定义一个Person类
定义一个Student类继承自Person类
创建一个Student类对象，并指定它的类型为Person类型
测试使用isInstance判断该对象是否为Person类型
测试使用getClass/classof判断该对象是否为Person类型
测试使用getClass/classof判|断该对象是否为Student类型
//演示getClass和Classof关键字
object getClass_lianxi {
//1 定义Person类
  class Person
  //2定义Student类 继承Person类
class Student extends  Person
  //3main 主入口
  def main (args : Array[String]) : Unit = {
    //4通过多态的形式创建Student类型的对象
    val p:Person=new Student
    //5测试使用isInstance判断该对象是否为Person类型
    println(p.isInstanceOf[Person]) //只要传入Person类型或者其子类对象 返回值true
  //6测试使用isInstance判断该对象是否为Student类型
    println(p.isInstanceOf[Student])//只要传入Person类型或者其子类对象 返回值true
    //7测试使用getClass和classof判断该对象是否为Person类型
      println(p.getClass==classOf[Person])
    //8测试使用getClass和classof判断该对象是否为Student类型
    println(p.getClass==classOf[Student])
  }
}
